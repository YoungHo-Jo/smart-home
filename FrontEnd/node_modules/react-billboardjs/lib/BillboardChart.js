'use strict';

exports.__esModule = true;
exports.updateChart = exports.unloadData = exports.redraw = exports.loadData = exports.getInstances = exports.generateChart = exports.exportChart = exports.destroyChart = exports.componentWillUnmount = exports.componentWillUpdate = exports.shouldComponentUpdate = exports.componentDidMount = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _shallowEqual = require('fbjs/lib/shallowEqual');

var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactParm = require('react-parm');

var _bb = require('./bb');

var _bb2 = _interopRequireDefault(_bb);

var _shapes = require('./shapes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // external dependencies


// billboard


// shapes


/** 
 * @function componentDidMount 
 * 
 * @description 
 * on mount, update the chart based on props 
 +
 * @param {Object} props the props passed to the component
 * @param {function} updateChart the method to update the chart
 * @returns {void}
 */
var componentDidMount = exports.componentDidMount = function componentDidMount(_ref) {
  var props = _ref.props,
      updateChart = _ref.updateChart;
  return requestAnimationFrame(function () {
    return updateChart(props);
  });
};

/**
 * @function shouldComponentUpdate
 *
 * @description
 * if the component is pure, base the update on whether props and context have changed
 *
 * @param {Object} context the instance context
 * @param {Object} props the instance props
 * @param {Object} nextProps the next props
 * @param {Object} nextStateIgnored the next state
 * @param {Object} nextContext the next context
 * @returns {boolean} should the component update
 */

var shouldComponentUpdate = exports.shouldComponentUpdate = function shouldComponentUpdate(_ref2, _ref3) {
  var context = _ref2.context,
      props = _ref2.props;
  var nextProps = _ref3[0],
      nextContext = _ref3[2];
  return nextProps.isPure ? !(0, _shallowEqual2.default)(props, nextProps) || !(0, _shallowEqual2.default)(context, nextContext) : true;
};

/**
 * @function componentWillUpdate
 *
 * @description
 * when the component will update, update the chart with the new props
 *
 * @param {function} updateChart the method to update the chart
 * @param {Object} nextProps the next props
 * @returns {void}
 */
var componentWillUpdate = exports.componentWillUpdate = function componentWillUpdate(_ref4, _ref5) {
  var updateChart = _ref4.updateChart;
  var nextProps = _ref5[0];
  return updateChart(nextProps);
};

/**
 * @function componentWillUnmount
 *
 * @description
 * prior to unmount, destroy the chart
 *
 * @param {function} destroyChart the method to destroy the chart
 * @returns {void}
 */
var componentWillUnmount = exports.componentWillUnmount = function componentWillUnmount(_ref6) {
  var destroyChart = _ref6.destroyChart;
  return destroyChart();
};

/**
 * @function destroyChart
 *
 * @description
 * destroy the chart and set the ref to null
 *
 * @param {ReactComponent} instance the component instance
 */
var destroyChart = exports.destroyChart = function destroyChart(instance) {
  if (instance.chart) {
    try {
      instance.chart.destroy();
    } catch (error) {
      // eslint-disable-next-line no-console
      console.error('Internal billboard.js error', error);
    }
  }

  instance.chart = null;
};

/**
 * @function exportChart
 *
 * @description
 * export the chart if it exists
 *
 * @param {BB} chart the chart instance
 * @param {string} mimeType the mimetype of the image
 * @param {function} callback the callback with the data URL
 * @returns {void}
 */
var exportChart = exports.exportChart = function exportChart(_ref7, _ref8) {
  var chart = _ref7.chart;
  var mimeType = _ref8[0],
      callback = _ref8[1];
  return chart && chart.export(mimeType, callback);
};

/**
 * @function generateChart
 *
 * @description
 * generate the chart based on the props passed
 *
 * @param {HTMLElement} chartElement the element to bind the chart to
 * @param {Object} props the props passed to the instance
 * @returns {Object} the chart instance that was generated
 */
var generateChart = function generateChart(_ref9) {
  var chartElement = _ref9.chartElement,
      _ref9$props = _ref9.props,
      classNameIgnored = _ref9$props.className,
      isPureIgnored = _ref9$props.isPure,
      styleIgnored = _ref9$props.style,
      unloadBeforeLoadIgnored = _ref9$props.unloadBeforeLoad,
      config = _objectWithoutProperties(_ref9$props, ['className', 'isPure', 'style', 'unloadBeforeLoad']);

  return (0, _bb2.default)().generate(_extends({
    bindto: chartElement
  }, config));
};

/**
 * @function getInstances
 *
 * @description
 * get all chart instances created by billboard
 *
 * @returns {Array<Object>} the array of chart instances
 */
exports.generateChart = generateChart;
var getInstances = exports.getInstances = function getInstances() {
  return (0, _bb2.default)().instance;
};

/**
 * @function loadData
 *
 * @description
 * load new data to the existing chart
 *
 * @param {BB} chart the chart instance
 * @param {Object} data the data to load
 * @returns {void}
 */
var loadData = exports.loadData = function loadData(_ref10, _ref11) {
  var chart = _ref10.chart;
  var data = _ref11[0];
  return chart && chart.load(data);
};

/**
 * @function redraw
 *
 * @description
 * trigger a redraw of the chart
 *
 * @returns {void}
 */
var redraw = exports.redraw = function redraw(_ref12) {
  var chart = _ref12.chart;
  return chart && chart.flush();
};

/**
 * @function unloadData
 *
 * @description
 * unload data from the existing chart
 *
 * @param {BB} chart the chart instance
 * @param {Object} data the data to unload
 * @returns {void}
 */
var unloadData = exports.unloadData = function unloadData(_ref13, _ref14) {
  var chart = _ref13.chart;
  var data = _ref14[0];
  return chart && chart.unload(data);
};

/**
 * @function updateChart
 *
 * @description
 * update the chart with the new data
 *
 * @param {ReactComponent} instance the component instance
 * @param {Object} props the props to update the chart with
 */
var updateChart = exports.updateChart = function updateChart(instance, _ref15) {
  var props = _ref15[0];
  var generateChart = instance.generateChart,
      loadData = instance.loadData;
  var data = props.data,
      unloadBeforeLoad = props.unloadBeforeLoad;


  if (!instance.chart) {
    instance.chart = generateChart(props);
  }

  loadData(unloadBeforeLoad ? _extends({}, data, { unload: true }) : data);
};

var BillboardChart = function BillboardChart(_ref16, instance) {
  var className = _ref16.className,
      domProps = _ref16.domProps,
      style = _ref16.style;
  return _react2.default.createElement('div', _extends({
    className: className,
    style: style
  }, domProps, {
    ref: (0, _reactParm.createElementRef)(instance, 'chartElement')
  }));
};

BillboardChart.displayName = 'BillboardChart';

BillboardChart.propTypes = {
  area: _shapes.AREA_SHAPE,
  axis: _shapes.AXIS_SHAPE,
  bar: _shapes.BAR_SHAPE,
  className: _propTypes2.default.string,
  clipPath: _propTypes2.default.bool,
  color: _shapes.COLOR_SHAPE,
  data: _shapes.DATA_SHAPE.isRequired,
  domProps: _propTypes2.default.object,
  donut: _shapes.DONUT_SHAPE,
  gauge: _shapes.GAUGE_SHAPE,
  grid: _shapes.GRID_SHAPE,
  interaction: _shapes.INTERACTION_SHAPE,
  isPure: _propTypes2.default.bool,
  legend: _shapes.LEGEND_SHAPE,
  line: _shapes.LINE_SHAPE,
  onafterinit: _propTypes2.default.func,
  onbeforeinit: _propTypes2.default.func,
  oninit: _propTypes2.default.func,
  onmouseout: _propTypes2.default.func,
  onmouseover: _propTypes2.default.func,
  onrendered: _propTypes2.default.func,
  onresize: _propTypes2.default.func,
  onresized: _propTypes2.default.func,
  padding: _shapes.PADDING_SHAPE,
  pie: _shapes.PIE_SHAPE,
  point: _shapes.POINT_SHAPE,
  regions: _propTypes2.default.arrayOf(_shapes.REGION_SHAPE),
  resize: _shapes.RESIZE_SHAPE,
  size: _shapes.SIZE_SHAPE,
  spline: _shapes.SPLINE_SHAPE,
  style: _propTypes2.default.object,
  subchart: _shapes.SUBCHART_SHAPE,
  svg: _shapes.SVG_SHAPE,
  title: _shapes.TITLE_SHAPE,
  tooltip: _shapes.TOOLTIP_SHAPE,
  transition: _shapes.TRANSITION_SHAPE,
  unloadBeforeLoad: _propTypes2.default.bool,
  zoom: _shapes.ZOOM_SHAPE
};

BillboardChart.defaultProps = {
  isPure: false,
  unloadBeforeLoad: false
};

BillboardChart.getInstances = getInstances;

exports.default = (0, _reactParm.createComponent)(BillboardChart, {
  // lifecycle methods
  componentDidMount: componentDidMount,
  shouldComponentUpdate: shouldComponentUpdate,
  componentWillUpdate: componentWillUpdate,
  componentWillUnmount: componentWillUnmount,
  // instance values
  chart: null,
  chartElement: null,
  // instance methods
  destroyChart: destroyChart,
  exportChart: exportChart,
  generateChart: generateChart,
  loadData: loadData,
  redraw: redraw,
  unloadData: unloadData,
  updateChart: updateChart
});